import Head from 'next/head'
import type { NextPage } from 'next'
import { io } from 'socket.io-client'
import { useState, useEffect, useRef } from 'react'
import styles from 'styles/Messenger.module.css'
import Message from 'components/Message/Message'
import useConversations from 'hooks/useConversations'
import ChatOnline from 'components/ChatOnline/ChatOnline'
import Conversation from 'components/Conversations/Conversation'
import useCurrentConversation from 'hooks/useCurrentConversation'
import MessageInput from 'components/MessageInput/MessageInput'

const Messenger : NextPage = () => {
  const socket:any = useRef()
  const scrollRef:any = useRef()
  const conversations = useConversations()
  const [arrivalMessage, setArrivalMessage] = useState<any>(null)
  const {
    userId,
    currentConversation,
    messages,
    setMessages,
    sendMessage,
    onChangeConversation,
  } = useCurrentConversation(socket)

  useEffect(() => {
    scrollRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  useEffect(() => {
    socket.current = io('ws://localhost:8900')

    socket.current.on('getMessage', (data:any) => {
      setArrivalMessage({
        sender: data.senderId,
        ...data.text,
        createdAt: Date.now(),
        id: (Math.random() + 1).toString(36).substring(7),
      });
    });
  }, [])

  useEffect(() => {
    if (arrivalMessage && currentConversation?.members.includes(`${arrivalMessage.sender}`)) {
      setMessages((prev) => [...prev, arrivalMessage]);
    }
  }, [arrivalMessage, currentConversation]);

  useEffect(() => {
    socket.current.emit('addUser', userId)
  }, [userId])

  let chatContainer = (
    <>
      <div className={styles.chatBoxTop}>
        {messages.map((m:any) => (
          <div key={m.id} ref={scrollRef}>
            <Message
              own={parseInt(m.sender, 10) === userId}
              text={m.text}
              createdAt={m.createdAt}
            />
          </div>
        ))}
      </div>
      <div className={styles.chatBoxBottom}>
        <MessageInput handleSubmit={sendMessage} />
      </div>
    </>
  )

  if (messages.length === 0) {
    chatContainer = (
      <>
        <div className={styles.chatBoxTop}>
          <div className={styles.emptyContainer}>
            <p className={styles.emptyText}>No hay mensajes.</p>
          </div>
        </div>
        <div className={styles.chatBoxBottom}>
          <MessageInput handleSubmit={sendMessage} />
        </div>
      </>
    )
  }

  if (!currentConversation) {
    chatContainer = (
      <div className={styles.emptyContainer}>
        <p className={styles.emptyText}>Open a conversation to start a chat.</p>
      </div>
    )
  }

  return (
    <div>
      <Head>
        <title>Messenger Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.messenger}>
        <div className={styles.chatMenu}>
          <div className={styles.chatMenuWrapper}>
            <input placeholder="Search for friends" className={styles.chatMenuInput} />
            {conversations.map((c:any) => (
              <Conversation
                key={c.id}
                name={c.name}
                imageUrl={c.imageUrl}
                onClick={() => onChangeConversation(c)}
              />
            ))}
          </div>
        </div>
        <div className={styles.chatBox}>
          <div className={styles.chatBoxWrapper}>
            {chatContainer}
          </div>
        </div>
        {/* <div className={styles.chatOnline}>
          <div className={styles.chatOnlineWrapper}>
            <ChatOnline />
            <ChatOnline />
            <ChatOnline />
            <ChatOnline />
            <ChatOnline />
            <ChatOnline />
            <ChatOnline />
            <ChatOnline />
          </div>
        </div> */}
      </div>
    </div>
  )
}

export default Messenger
